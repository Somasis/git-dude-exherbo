#!/bin/bash
#
# git-dude - Git commit notifier
# https://github.com/somasis/git-dude
#
# Copyright (C) 2011-2015 Marcin Kulik <http://ku1ik.com/>
# Copyright (C) 2015 Kylie McClain <somasissounds@gmail.com>
#
# Other contributions from:
#   Alexander von Gluck IV <https://github.com/kallisti5>
#   Anders Olsson <https://github.com/logaritmisk>
#   Daniel Heath <https://github.com/DanielHeath>
#   Eric Jiang <https://github.com/erjiang>
#   Henrik Holmboe <https://github.com/holmboe>
#   Josh Dick <https://github.com/joshdick>
#   Lochlan Bunn <https://github.com/loklaan>
#   Michael Wolf <https://github.com/maw>
#   Rogerio Prado de Jesus <https://github.com/rogeriopradoj>
#   Stefano Ongeri <https://github.com/stelinx>
#   ≈Åukasz Korecki <https://github.com/lukaszkorecki>
#
# Distributed under the GNU General Public License, version 3.0.

dir=$(git config --global dude.default-dir || true)
dir=${dir:-~/.git-dude}

max_jobs=$(git config --global dude.max-jobs || true)
max_jobs=${max_jobs:-5}

notify_command=$(git config --global dude.notify-command || true)

interval=$(git config --global dude.interval || true)
interval=${interval:-60}

app_name=$(basename $0)

set -e

export LC_ALL=C # make sure git talks english

if [[ -z "$notify_command" ]]; then
    if [[ $(which notify-send 2>/dev/null) ]]; then
        notify_cmd='notify-send -i "$ICON_PATH" "$TITLE" "$DESCRIPTION"'
    elif [[ $(which terminal-notifier 2>/dev/null) ]]; then
        notify_cmd='terminal-notifier -title "$TITLE" -message"$DESCRIPTION"'
    elif [[ $(which growlnotify 2>/dev/null) ]]; then
        notify_cmd='growlnotify -n "$app_name" --image "$ICON_PATH" -m "$DESCRIPTION" "$TITLE"'
    elif [[ $(which kdialog 2>/dev/null) ]]; then
        notify_cmd='kdialog --icon $ICON_PATH --title "$TITLE" --passivepopup "$DESCRIPTION"'
    elif [[ $(which notify 2>/dev/null) ]]; then
        notify_cmd='notify --type information --icon "$ICON_PATH" --group "Git Commit" --title "$TITLE" "$DESCRIPTION"'
    fi
fi

dudenotify() {
    local ICON_PATH="$1"
    local TITLE="$2"
    local DESCRIPTION="$3"

    if [[ -n "$notify_cmd" ]]; then
        eval $notify_cmd
    fi

    date "+%x %X"
    echo "$TITLE"
    if [[ -n "$DESCRIPTION" ]]; then
        echo "$DESCRIPTION"
    fi
    echo
}

if [[ -z "$screensaver_cmd" ]];then
    if [[ $(which slock 2>/dev/null) ]]; then
        screensaver_cmd='pgrep slock'
    elif [[ $(which gnome-screensaver-command 2>/dev/null) ]]; then
        screensaver_cmd='LANG=C gnome-screensaver-command -q | grep -q "is active"'
    fi
fi

screensaver() {
    if [[ -n "$screensaver_cmd" ]]; then
        eval $screensaver_cmd
        if [[ $? != 0 ]]; then
            return 1
        fi
    fi

    # if we cannot be certain, default to saying screensaver is not
    # active in order to run git-dude on every loop
    return 0
}

if [[ -d "$1" ]];then
    cd "$1"
else
    cd "$dir"
fi

while true; do
    if ! screensaver; then
        for dir_name in *; do
            jobs=$(jobs | grep ' git' | wc -l)
                {
                    if [[ -d "$dir_name" && $(cd "$dir_name"; git rev-parse --git-dir 2>/dev/null) ]]; then
                        if [[ $(cd "$dir_name"; git config dude.ignore) == true ]]; then
                            continue
                        fi

                        repo_name=$(basename "$dir_name" .git)
                        cd "$dir_name"

                        remote=$(git config dude.remote || true)
                        changes=$(git fetch $(git config dude.fargs) $remote 2>&1 | grep -F -- '->' | sed 's/^ [+*=!-] //')

                        icon_path=$(git config dude.icon || true)
                        icon_path=${icon_path:-`pwd`/icon.png}
                        icon_path=${icon_path// /\\ } # escape spaces before eval
                        eval icon_path=$icon_path # to expand ~

                        while read -r line; do
                            case $line in
                                *..*)
                                    commit_range=$(echo "$line" | awk '{ print $1 }')
                                    branch_name=$(echo "$line" | awk '{ print $2 }')
                                    commit_messages=$(git log $commit_range --pretty=format:'%s (%an)')
                                    notify_message="New commits: $repo_name/$branch_name"
                                    if [[ -n "$remote" ]]; then
                                            notify_message="${notify_message} at $remote"
                                    fi
                                    dudenotify $icon_path "$notify_message" "$commit_messages"
                                    ;;
                                *new\ branch*)
                                    branch_name=$(echo "$line" | awk '{ print $3 }')
                                    notify_message="New branch: $repo_name/$branch_name"
                                    if [[ -n "$remote" ]]; then
                                            notify_message="${notify_message} at $remote"
                                    fi
                                    dudenotify $icon_path "$notify_message" ""
                                    ;;
                                *new\ tag*)
                                    tag_name=$(echo "$line" | awk '{ print $3 }')
                                    notify_message="New tag: $repo_name/$tag_name"
                                    if [[ -n "$remote" ]]; then
                                            notify_message="${notify_message} at $remote"
                                    fi
                                    dudenotify $icon_path "$notify_message" ""
                                    ;;
                            esac
                        done <<< "$changes"

                        cd - &>/dev/null
                    fi
                } &

            if [[ "$jobs" -ge "$max_jobs" ]];then
                wait
            fi
        done
    fi
    sleep "$interval"
done

