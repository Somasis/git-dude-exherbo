#!/bin/bash
#
# git-dude-exherbo - Git commit notifier used in #exherbo
# https://github.com/somasis/git-dude-exherbo
#
# Copyright (C) 2011-2015 Marcin Kulik <http://ku1ik.com/>
# Copyright (C) 2015 Kylie McClain <somasis@exherbo.org>
#
# Other contributions from:
#   Alexander von Gluck IV <https://github.com/kallisti5>
#   Anders Olsson <https://github.com/logaritmisk>
#   Daniel Heath <https://github.com/DanielHeath>
#   Eric Jiang <https://github.com/erjiang>
#   Henrik Holmboe <https://github.com/holmboe>
#   Josh Dick <https://github.com/joshdick>
#   Lochlan Bunn <https://github.com/loklaan>
#   Michael Wolf <https://github.com/maw>
#   Rogerio Prado de Jesus <https://github.com/rogeriopradoj>
#   Stefano Ongeri <https://github.com/stelinx>
#   ≈Åukasz Korecki <https://github.com/lukaszkorecki>
#
# Distributed under the GNU General Public License, version 3.0.
#

set -o errexit

dir=$(git config --global dude.default-dir || true)
dir=${dir:-~/.git-dude}

max_jobs=$(git config --global dude.max-jobs || true)
max_jobs=${max_jobs:-2}

notify_command=$(git config --global dude.notify-command || true)

app_name=$(basename $0)

set -e

export LC_ALL=C # make sure git talks english
export GIT_ASKPASS=true # make sure git doesn't prompt for a password

normal=$'\u000F'
bold=$'\u0002'
underline=$'\u001F'
blue=$'\u0003'"02"
green=$'\u0003'"03"
brown=$'\u0003'"05"
purple=$'\u0003'"06"
orange=$'\u0003'"07"
lightblue=$'\u0003'"12"
pink=$'\u0003'"13"

interval() {
    echo 60
}

dudenotify() {
    local TITLE="$repo_name/$branch"
    local TYPE="$1"
    local DESC="$@"
    echo "${bold}$TITLE${normal}: $ACTION - $@"
    sleep 2s
}

category() {
    case "${1}" in
        */midipix/*)
            echo midipix
        ;;
        */custom/*)
            git -C "${1}" config dude.category 2>/dev/null || echo custom
        ;;
        */sardemff7)
            echo dev
        ;;
        *)
            echo unofficial
        ;;
    esac
}


gitio() { # shorten a github url with git.io; gitio <urls>
    local url
    for url in $@;do
        curl --max-time 10 --silent -i https://git.io -F "url=$1" | grep Location: | cut -d' ' -f2-
    done
}

0x0st() { # shorten any url with 0x0.st; 0x0st <urls>
    local url
    for url in $@;do
        curl --max-time 10 --silent -F "shorten=${url}" "https://0x0.st"
    done
}

get_url() { # get_url <type> <remote> <hash/branch name>
    type="$1"
    if [[ $(git -C "${dir}" config dude.url) == 'false' ]];then
        return 1
    fi
    [[ "$2" == '/'* ]] && return 0
    if [[ "$type" == "commit" ]];then
        case "$2" in
            *bitbucket.org*)
                local url=$(0x0st  "$2/commits/$3")
                ;;
            *git.exherbo.org*|*midipix.org*)
                local url=$(0x0st "$2/commit/?id=$3")
                ;;
            *gitlab.com*)
                local url=$(0x0st $(echo "$2" | sed 's/\.git//;s#/$##')"/commit/$3")
                ;;
            *github.com*)
                local url=$(gitio $(echo "$2" | sed 's/\.git//;s#/$##')"/commit/$3")
                ;;
        esac
    elif [[ "$type" == "branch" ]];then
        case "$2" in
            *bitbucket.org*)
                local url=$(0x0st "$2/branch/$3")
                ;;
            *git.exherbo.org*|*midipix.org*)
                local url=$(0x0st "$2/log/?h=$3")
                ;;
            *gitlab.com*)
                local url=$(0x0st $(echo "$2" | sed 's/\.git//;s#/$##')"/commits/$3")
                ;;
            *github.com*)
                local url=$(gitio $(echo "$2" | sed 's/\.git//;s#/$##')"/commits/$3")
                ;;
        esac
    elif [[ "$type" == "tag" ]];then
        case "$2" in
            *bitbucket.org*)
                local url=$(0x0st "$2/commits/tag/$3")
                ;;
            *git.exherbo.org*|*midipix.org*)
                local url=$(0x0st "$2/tag/?id=$3")
                ;;
            *gitlab.com*)
                local url=$(0x0st $(echo "$2" | sed 's/\.git//;s#/$##')"/commits/$3")
                ;;
            *github.com*)
                local url=$(gitio $(echo "$2" | sed 's/\.git//;s#/$##')"/commits/$3")
                ;;
        esac
    fi

    if [[ ! -z "$url" ]];then
        echo " ${brown}${url}"
    fi
}

say() {
    local msg="$@"
    local length=$(echo "$msg" | wc -c)
    [[ "$length" -gt 394 ]] && local msg=$(echo "$msg" | cut -c-394)
    sleep 3s
    echo "$msg"
}

#say "started at $(date +'%X %x')."

# main loop
while true; do
    for d in $@;do
        cd "${d}"
        for dir_name in *; do
            jobs=$(jobs | grep ' git' | wc -l)
                {
                    if [[ -d "$dir_name" && $(cd "$dir_name"; git rev-parse --git-dir 2>/dev/null) ]]; then
                        if [[ $(cd "$dir_name"; git config dude.ignore) == true ]]; then
                            continue
                        fi

                        dir="${PWD}/${dir_name}"
                        repo_name=$(basename "$dir" .git)
                        [[ -f "./profiles/repo_name" ]] && repo_name=$(echo $(<"${dir}"/profiles/repo_name))

                        remote=$(git -C "${dir}" config dude.remote || true)
                        changes=$(git -C "${dir}" fetch -v $(git config dude.fargs) ${remote} 2>&1 | grep -F -- '->' | sed 's/^ [+*=!-] //')
                        url=$(git -C "${dir}" config --get remote.origin.url)
                        category=$(category "${PWD}/${dir_name}")


                        while read -r line; do
                            #printf "%s:\t%s\n" "$repo_name" "$line" >&2
                            case "$line" in
                                *..*)
                                    commit_range=$(echo "$line" | awk '{ print $1 }')
                                    branch_name=$(echo "$line" | awk '{ print $2 }')
                                    OLDIFS="$IFS"
                                    IFS=$'\n'
                                    { git -C "${dir}" log $commit_range --pretty=format:"${repo_name}:${branch_name}|%h|%aE|%s" | sed '1!G;h;$!d'; echo; } | grep -Ev '^[[:space:]]*$' | \
                                        while read commit_line;do
                                            location=$(echo "$commit_line" | cut -d'|' -f1)
                                            hash=$(echo "$commit_line" | cut -d'|' -f2)
                                            author=$(echo "$commit_line" | cut -d'|' -f3 | cut -d'@' -f1)
                                            commit=$(echo "$commit_line" | cut -d'|' -f4-)
                                            files=$(git -C "${dir}" diff-tree -r --name-only "$hash" | tr '\n' ' ' | cut -d' ' -f2- | sed 's/ $//')
                                            [[ -z "$files" ]] && files="no files modified"
                                            [[ $(echo "${files}" | wc -c) -gt 100 ]] && files=""
                                            say "${purple}${author}${normal} ${category:+$category/}${repo_name}:${orange}${branch_name}${normal} * ${bold}${hash}${normal} / ${bold}${files}${normal}: ${commit}$(get_url commit $url $hash)"
                                        done
                                    IFS="$OLDIFS"
                                    ;;
                                *new\ branch*)
                                    branch_name=$(echo "$line" | awk '{ print $3 }')
                                    say "${category:+$category/}${repo_name}:${lightblue}${branch_name}${normal}: new branch created$(get_url branch $url $branch_name)"
                                    ;;
                                *new\ tag*)
                                    tag_name=$(echo "$line" | awk '{ print $3 }')
                                    say "${category:+$category/}${repo_name}:${lightblue}${tag_name}${normal}: new tag created$(get_url tag $url $tag_name)"
                                    ;;
                            esac
                        done <<< "$changes"

                        cd - &>/dev/null
                    fi
                } &

            if [[ "$jobs" -ge "$max_jobs" ]];then
                wait
            fi
        done
    done
    sleep "$(interval)"
done

